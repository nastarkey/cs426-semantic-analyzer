/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PDeclareStatement : Node
{
}

public abstract class PConstantDeclareStatement : Node
{
}

public abstract class PMainFunctionCall : Node
{
}

public abstract class PFunctionDeclarationStatement : Node
{
}

public abstract class PFunctionCallStatement : Node
{
}

public abstract class PFormalParameters : Node
{
}

public abstract class PParameters : Node
{
}

public abstract class PAssignStatement : Node
{
}

public abstract class PIfStatement : Node
{
}

public abstract class PElseStatement : Node
{
}

public abstract class PWhileStatement : Node
{
}

public abstract class POrExp : Node
{
}

public abstract class PAndExp : Node
{
}

public abstract class PNotExp : Node
{
}

public abstract class PCompExpEq : Node
{
}

public abstract class PCompExpLtgt : Node
{
}

public abstract class PExp0 : Node
{
}

public abstract class PExp1 : Node
{
}

public abstract class PExp2 : Node
{
}

public abstract class PExp3 : Node
{
}

public abstract class POperand : Node
{
}


public sealed class AProgram : PProgram
{
    private TypedList _constant_declare_statement_;
    private TypedList _function_declaration_statement_;
    private PMainFunctionCall _main_function_call_;

    public AProgram ()
    {
        this._constant_declare_statement_ = new TypedList(new ConstantDeclareStatement_Cast(this));
        this._function_declaration_statement_ = new TypedList(new FunctionDeclarationStatement_Cast(this));
    }

    public AProgram (
            IList _constant_declare_statement_,
            IList _function_declaration_statement_,
            PMainFunctionCall _main_function_call_
    )
    {
        this._constant_declare_statement_ = new TypedList(new ConstantDeclareStatement_Cast(this));
        this._constant_declare_statement_.Clear();
        this._constant_declare_statement_.AddAll(_constant_declare_statement_);
        this._function_declaration_statement_ = new TypedList(new FunctionDeclarationStatement_Cast(this));
        this._function_declaration_statement_.Clear();
        this._function_declaration_statement_.AddAll(_function_declaration_statement_);
        SetMainFunctionCall (_main_function_call_);
    }

    public override Object Clone()
    {
        return new AProgram (
            CloneList (_constant_declare_statement_),
            CloneList (_function_declaration_statement_),
            (PMainFunctionCall)CloneNode (_main_function_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public IList GetConstantDeclareStatement ()
    {
        return _constant_declare_statement_;
    }

    public void setConstantDeclareStatement (IList list)
    {
        _constant_declare_statement_.Clear();
        _constant_declare_statement_.AddAll(list);
    }
    public IList GetFunctionDeclarationStatement ()
    {
        return _function_declaration_statement_;
    }

    public void setFunctionDeclarationStatement (IList list)
    {
        _function_declaration_statement_.Clear();
        _function_declaration_statement_.AddAll(list);
    }
    public PMainFunctionCall GetMainFunctionCall ()
    {
        return _main_function_call_;
    }

    public void SetMainFunctionCall (PMainFunctionCall node)
    {
        if(_main_function_call_ != null)
        {
            _main_function_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_function_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_declare_statement_)
            + ToString (_function_declaration_statement_)
            + ToString (_main_function_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_declare_statement_.Contains(child) )
        {
            _constant_declare_statement_.Remove(child);
            return;
        }
        if ( _function_declaration_statement_.Contains(child) )
        {
            _function_declaration_statement_.Remove(child);
            return;
        }
        if ( _main_function_call_ == child )
        {
            _main_function_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _constant_declare_statement_.Count; i++ )
        {
            Node n = (Node)_constant_declare_statement_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _constant_declare_statement_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _constant_declare_statement_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _function_declaration_statement_.Count; i++ )
        {
            Node n = (Node)_function_declaration_statement_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _function_declaration_statement_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _function_declaration_statement_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _main_function_call_ == oldChild )
        {
            SetMainFunctionCall ((PMainFunctionCall) newChild);
            return;
        }
    }

    private class ConstantDeclareStatement_Cast : Cast
    {
        AProgram obj;

        internal ConstantDeclareStatement_Cast (AProgram obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PConstantDeclareStatement node = (PConstantDeclareStatement) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PConstantDeclareStatement node = (PConstantDeclareStatement) o;
            node.Parent(null);
            return node;
        }
    }
    private class FunctionDeclarationStatement_Cast : Cast
    {
        AProgram obj;

        internal FunctionDeclarationStatement_Cast (AProgram obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PFunctionDeclarationStatement node = (PFunctionDeclarationStatement) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PFunctionDeclarationStatement node = (PFunctionDeclarationStatement) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AMultipleStatements : PStatements
{
    private PStatement _statement_;
    private PStatements _statements_;

    public AMultipleStatements ()
    {
    }

    public AMultipleStatements (
            PStatement _statement_,
            PStatements _statements_
    )
    {
        SetStatement (_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AMultipleStatements (
            (PStatement)CloneNode (_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class ASingleStatements : PStatements
{


    public ASingleStatements (
    )
    {
    }

    public override Object Clone()
    {
        return new ASingleStatements (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleStatements(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADeclarationStatement : PStatement
{
    private PDeclareStatement _declare_statement_;

    public ADeclarationStatement ()
    {
    }

    public ADeclarationStatement (
            PDeclareStatement _declare_statement_
    )
    {
        SetDeclareStatement (_declare_statement_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatement (
            (PDeclareStatement)CloneNode (_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatement(this);
    }

    public PDeclareStatement GetDeclareStatement ()
    {
        return _declare_statement_;
    }

    public void SetDeclareStatement (PDeclareStatement node)
    {
        if(_declare_statement_ != null)
        {
            _declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declare_statement_ == child )
        {
            _declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declare_statement_ == oldChild )
        {
            SetDeclareStatement ((PDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignStatement _assign_statement_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignStatement _assign_statement_
    )
    {
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class ACallStatement : PStatement
{
    private PFunctionCallStatement _function_call_statement_;

    public ACallStatement ()
    {
    }

    public ACallStatement (
            PFunctionCallStatement _function_call_statement_
    )
    {
        SetFunctionCallStatement (_function_call_statement_);
    }

    public override Object Clone()
    {
        return new ACallStatement (
            (PFunctionCallStatement)CloneNode (_function_call_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallStatement(this);
    }

    public PFunctionCallStatement GetFunctionCallStatement ()
    {
        return _function_call_statement_;
    }

    public void SetFunctionCallStatement (PFunctionCallStatement node)
    {
        if(_function_call_statement_ != null)
        {
            _function_call_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_call_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_call_statement_ == child )
        {
            _function_call_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_call_statement_ == oldChild )
        {
            SetFunctionCallStatement ((PFunctionCallStatement) newChild);
            return;
        }
    }

}
public sealed class AMainStatement : PStatement
{
    private PMainFunctionCall _main_function_call_;

    public AMainStatement ()
    {
    }

    public AMainStatement (
            PMainFunctionCall _main_function_call_
    )
    {
        SetMainFunctionCall (_main_function_call_);
    }

    public override Object Clone()
    {
        return new AMainStatement (
            (PMainFunctionCall)CloneNode (_main_function_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainStatement(this);
    }

    public PMainFunctionCall GetMainFunctionCall ()
    {
        return _main_function_call_;
    }

    public void SetMainFunctionCall (PMainFunctionCall node)
    {
        if(_main_function_call_ != null)
        {
            _main_function_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_function_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_function_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_function_call_ == child )
        {
            _main_function_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_function_call_ == oldChild )
        {
            SetMainFunctionCall ((PMainFunctionCall) newChild);
            return;
        }
    }

}
public sealed class AIfStmtStatement : PStatement
{
    private PIfStatement _if_statement_;

    public AIfStmtStatement ()
    {
    }

    public AIfStmtStatement (
            PIfStatement _if_statement_
    )
    {
        SetIfStatement (_if_statement_);
    }

    public override Object Clone()
    {
        return new AIfStmtStatement (
            (PIfStatement)CloneNode (_if_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStmtStatement(this);
    }

    public PIfStatement GetIfStatement ()
    {
        return _if_statement_;
    }

    public void SetIfStatement (PIfStatement node)
    {
        if(_if_statement_ != null)
        {
            _if_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_statement_ == child )
        {
            _if_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_statement_ == oldChild )
        {
            SetIfStatement ((PIfStatement) newChild);
            return;
        }
    }

}
public sealed class AElseStmtStatement : PStatement
{
    private PElseStatement _else_statement_;

    public AElseStmtStatement ()
    {
    }

    public AElseStmtStatement (
            PElseStatement _else_statement_
    )
    {
        SetElseStatement (_else_statement_);
    }

    public override Object Clone()
    {
        return new AElseStmtStatement (
            (PElseStatement)CloneNode (_else_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElseStmtStatement(this);
    }

    public PElseStatement GetElseStatement ()
    {
        return _else_statement_;
    }

    public void SetElseStatement (PElseStatement node)
    {
        if(_else_statement_ != null)
        {
            _else_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_else_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _else_statement_ == child )
        {
            _else_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _else_statement_ == oldChild )
        {
            SetElseStatement ((PElseStatement) newChild);
            return;
        }
    }

}
public sealed class AWhileStmtStatement : PStatement
{
    private PWhileStatement _while_statement_;

    public AWhileStmtStatement ()
    {
    }

    public AWhileStmtStatement (
            PWhileStatement _while_statement_
    )
    {
        SetWhileStatement (_while_statement_);
    }

    public override Object Clone()
    {
        return new AWhileStmtStatement (
            (PWhileStatement)CloneNode (_while_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStmtStatement(this);
    }

    public PWhileStatement GetWhileStatement ()
    {
        return _while_statement_;
    }

    public void SetWhileStatement (PWhileStatement node)
    {
        if(_while_statement_ != null)
        {
            _while_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_statement_ == child )
        {
            _while_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_statement_ == oldChild )
        {
            SetWhileStatement ((PWhileStatement) newChild);
            return;
        }
    }

}
public sealed class AFuncDeclarationStatement : PStatement
{
    private PFunctionDeclarationStatement _function_declaration_statement_;

    public AFuncDeclarationStatement ()
    {
    }

    public AFuncDeclarationStatement (
            PFunctionDeclarationStatement _function_declaration_statement_
    )
    {
        SetFunctionDeclarationStatement (_function_declaration_statement_);
    }

    public override Object Clone()
    {
        return new AFuncDeclarationStatement (
            (PFunctionDeclarationStatement)CloneNode (_function_declaration_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFuncDeclarationStatement(this);
    }

    public PFunctionDeclarationStatement GetFunctionDeclarationStatement ()
    {
        return _function_declaration_statement_;
    }

    public void SetFunctionDeclarationStatement (PFunctionDeclarationStatement node)
    {
        if(_function_declaration_statement_ != null)
        {
            _function_declaration_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_declaration_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_declaration_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_declaration_statement_ == child )
        {
            _function_declaration_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_declaration_statement_ == oldChild )
        {
            SetFunctionDeclarationStatement ((PFunctionDeclarationStatement) newChild);
            return;
        }
    }

}
public sealed class ANoAssignDeclareStatement : PDeclareStatement
{
    private TId _type_;
    private TId _varname_;
    private TEol _eol_;

    public ANoAssignDeclareStatement ()
    {
    }

    public ANoAssignDeclareStatement (
            TId _type_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ANoAssignDeclareStatement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoAssignDeclareStatement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AAssignDeclareStatement : PDeclareStatement
{
    private TId _type_;
    private TId _varname_;
    private TAssign _assign_;
    private POrExp _or_exp_;
    private TEol _eol_;

    public AAssignDeclareStatement ()
    {
    }

    public AAssignDeclareStatement (
            TId _type_,
            TId _varname_,
            TAssign _assign_,
            POrExp _or_exp_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetAssign (_assign_);
        SetOrExp (_or_exp_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignDeclareStatement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TAssign)CloneNode (_assign_),
            (POrExp)CloneNode (_or_exp_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignDeclareStatement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public POrExp GetOrExp ()
    {
        return _or_exp_;
    }

    public void SetOrExp (POrExp node)
    {
        if(_or_exp_ != null)
        {
            _or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_exp_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_assign_)
            + ToString (_or_exp_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _or_exp_ == child )
        {
            _or_exp_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _or_exp_ == oldChild )
        {
            SetOrExp ((POrExp) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AAssignFunctionDeclareStatement : PDeclareStatement
{
    private TId _type_;
    private TId _varname_;
    private TAssign _assign_;
    private PFunctionCallStatement _function_call_statement_;

    public AAssignFunctionDeclareStatement ()
    {
    }

    public AAssignFunctionDeclareStatement (
            TId _type_,
            TId _varname_,
            TAssign _assign_,
            PFunctionCallStatement _function_call_statement_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetAssign (_assign_);
        SetFunctionCallStatement (_function_call_statement_);
    }

    public override Object Clone()
    {
        return new AAssignFunctionDeclareStatement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TAssign)CloneNode (_assign_),
            (PFunctionCallStatement)CloneNode (_function_call_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignFunctionDeclareStatement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PFunctionCallStatement GetFunctionCallStatement ()
    {
        return _function_call_statement_;
    }

    public void SetFunctionCallStatement (PFunctionCallStatement node)
    {
        if(_function_call_statement_ != null)
        {
            _function_call_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_assign_)
            + ToString (_function_call_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _function_call_statement_ == child )
        {
            _function_call_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _function_call_statement_ == oldChild )
        {
            SetFunctionCallStatement ((PFunctionCallStatement) newChild);
            return;
        }
    }

}
public sealed class AConstConstantDeclareStatement : PConstantDeclareStatement
{
    private TConstant _constant_;
    private TId _type_;
    private TId _varname_;
    private TAssign _assign_;
    private POrExp _or_exp_;
    private TEol _eol_;

    public AConstConstantDeclareStatement ()
    {
    }

    public AConstConstantDeclareStatement (
            TConstant _constant_,
            TId _type_,
            TId _varname_,
            TAssign _assign_,
            POrExp _or_exp_,
            TEol _eol_
    )
    {
        SetConstant (_constant_);
        SetType (_type_);
        SetVarname (_varname_);
        SetAssign (_assign_);
        SetOrExp (_or_exp_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AConstConstantDeclareStatement (
            (TConstant)CloneNode (_constant_),
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TAssign)CloneNode (_assign_),
            (POrExp)CloneNode (_or_exp_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstConstantDeclareStatement(this);
    }

    public TConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (TConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public POrExp GetOrExp ()
    {
        return _or_exp_;
    }

    public void SetOrExp (POrExp node)
    {
        if(_or_exp_ != null)
        {
            _or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_exp_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_)
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_assign_)
            + ToString (_or_exp_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _or_exp_ == child )
        {
            _or_exp_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_ == oldChild )
        {
            SetConstant ((TConstant) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _or_exp_ == oldChild )
        {
            SetOrExp ((POrExp) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMainFunctionCall : PMainFunctionCall
{
    private TMain _main_;
    private TLeftParenthesis _left_parenthesis_;
    private PFormalParameters _formal_parameters_;
    private TRightParenthesis _right_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TCloseBrace _close_brace_;

    public AMainFunctionCall ()
    {
    }

    public AMainFunctionCall (
            TMain _main_,
            TLeftParenthesis _left_parenthesis_,
            PFormalParameters _formal_parameters_,
            TRightParenthesis _right_parenthesis_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TCloseBrace _close_brace_
    )
    {
        SetMain (_main_);
        SetLeftParenthesis (_left_parenthesis_);
        SetFormalParameters (_formal_parameters_);
        SetRightParenthesis (_right_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AMainFunctionCall (
            (TMain)CloneNode (_main_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PFormalParameters)CloneNode (_formal_parameters_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainFunctionCall(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PFormalParameters GetFormalParameters ()
    {
        return _formal_parameters_;
    }

    public void SetFormalParameters (PFormalParameters node)
    {
        if(_formal_parameters_ != null)
        {
            _formal_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameters_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_left_parenthesis_)
            + ToString (_formal_parameters_)
            + ToString (_right_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _formal_parameters_ == child )
        {
            _formal_parameters_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _formal_parameters_ == oldChild )
        {
            SetFormalParameters ((PFormalParameters) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class ANoParamMainFunctionCall : PMainFunctionCall
{
    private TMain _main_;
    private TLeftParenthesis _left_parenthesis_;
    private TRightParenthesis _right_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TCloseBrace _close_brace_;

    public ANoParamMainFunctionCall ()
    {
    }

    public ANoParamMainFunctionCall (
            TMain _main_,
            TLeftParenthesis _left_parenthesis_,
            TRightParenthesis _right_parenthesis_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TCloseBrace _close_brace_
    )
    {
        SetMain (_main_);
        SetLeftParenthesis (_left_parenthesis_);
        SetRightParenthesis (_right_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new ANoParamMainFunctionCall (
            (TMain)CloneNode (_main_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoParamMainFunctionCall(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_left_parenthesis_)
            + ToString (_right_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AWithPromiseFunctionDeclarationStatement : PFunctionDeclarationStatement
{
    private TId _funcname_;
    private TLeftParenthesis _left_parenthesis_;
    private PFormalParameters _formal_parameters_;
    private TRightParenthesis _right_parenthesis_;
    private TPromise _promise_;
    private TId _type_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TCloseBrace _close_brace_;

    public AWithPromiseFunctionDeclarationStatement ()
    {
    }

    public AWithPromiseFunctionDeclarationStatement (
            TId _funcname_,
            TLeftParenthesis _left_parenthesis_,
            PFormalParameters _formal_parameters_,
            TRightParenthesis _right_parenthesis_,
            TPromise _promise_,
            TId _type_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TCloseBrace _close_brace_
    )
    {
        SetFuncname (_funcname_);
        SetLeftParenthesis (_left_parenthesis_);
        SetFormalParameters (_formal_parameters_);
        SetRightParenthesis (_right_parenthesis_);
        SetPromise (_promise_);
        SetType (_type_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AWithPromiseFunctionDeclarationStatement (
            (TId)CloneNode (_funcname_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PFormalParameters)CloneNode (_formal_parameters_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TPromise)CloneNode (_promise_),
            (TId)CloneNode (_type_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWithPromiseFunctionDeclarationStatement(this);
    }

    public TId GetFuncname ()
    {
        return _funcname_;
    }

    public void SetFuncname (TId node)
    {
        if(_funcname_ != null)
        {
            _funcname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcname_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PFormalParameters GetFormalParameters ()
    {
        return _formal_parameters_;
    }

    public void SetFormalParameters (PFormalParameters node)
    {
        if(_formal_parameters_ != null)
        {
            _formal_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameters_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TPromise GetPromise ()
    {
        return _promise_;
    }

    public void SetPromise (TPromise node)
    {
        if(_promise_ != null)
        {
            _promise_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _promise_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_funcname_)
            + ToString (_left_parenthesis_)
            + ToString (_formal_parameters_)
            + ToString (_right_parenthesis_)
            + ToString (_promise_)
            + ToString (_type_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _funcname_ == child )
        {
            _funcname_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _formal_parameters_ == child )
        {
            _formal_parameters_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _promise_ == child )
        {
            _promise_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _funcname_ == oldChild )
        {
            SetFuncname ((TId) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _formal_parameters_ == oldChild )
        {
            SetFormalParameters ((PFormalParameters) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _promise_ == oldChild )
        {
            SetPromise ((TPromise) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AWithoutPromiseFunctionDeclarationStatement : PFunctionDeclarationStatement
{
    private TId _funcname_;
    private TLeftParenthesis _left_parenthesis_;
    private PFormalParameters _formal_parameters_;
    private TRightParenthesis _right_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TCloseBrace _close_brace_;

    public AWithoutPromiseFunctionDeclarationStatement ()
    {
    }

    public AWithoutPromiseFunctionDeclarationStatement (
            TId _funcname_,
            TLeftParenthesis _left_parenthesis_,
            PFormalParameters _formal_parameters_,
            TRightParenthesis _right_parenthesis_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TCloseBrace _close_brace_
    )
    {
        SetFuncname (_funcname_);
        SetLeftParenthesis (_left_parenthesis_);
        SetFormalParameters (_formal_parameters_);
        SetRightParenthesis (_right_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AWithoutPromiseFunctionDeclarationStatement (
            (TId)CloneNode (_funcname_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PFormalParameters)CloneNode (_formal_parameters_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWithoutPromiseFunctionDeclarationStatement(this);
    }

    public TId GetFuncname ()
    {
        return _funcname_;
    }

    public void SetFuncname (TId node)
    {
        if(_funcname_ != null)
        {
            _funcname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcname_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PFormalParameters GetFormalParameters ()
    {
        return _formal_parameters_;
    }

    public void SetFormalParameters (PFormalParameters node)
    {
        if(_formal_parameters_ != null)
        {
            _formal_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameters_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_funcname_)
            + ToString (_left_parenthesis_)
            + ToString (_formal_parameters_)
            + ToString (_right_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _funcname_ == child )
        {
            _funcname_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _formal_parameters_ == child )
        {
            _formal_parameters_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _funcname_ == oldChild )
        {
            SetFuncname ((TId) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _formal_parameters_ == oldChild )
        {
            SetFormalParameters ((PFormalParameters) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AFunctionCallStatement : PFunctionCallStatement
{
    private TId _funcname_;
    private TLeftParenthesis _left_parenthesis_;
    private PParameters _parameters_;
    private TRightParenthesis _right_parenthesis_;
    private TEol _eol_;

    public AFunctionCallStatement ()
    {
    }

    public AFunctionCallStatement (
            TId _funcname_,
            TLeftParenthesis _left_parenthesis_,
            PParameters _parameters_,
            TRightParenthesis _right_parenthesis_,
            TEol _eol_
    )
    {
        SetFuncname (_funcname_);
        SetLeftParenthesis (_left_parenthesis_);
        SetParameters (_parameters_);
        SetRightParenthesis (_right_parenthesis_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctionCallStatement (
            (TId)CloneNode (_funcname_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PParameters)CloneNode (_parameters_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCallStatement(this);
    }

    public TId GetFuncname ()
    {
        return _funcname_;
    }

    public void SetFuncname (TId node)
    {
        if(_funcname_ != null)
        {
            _funcname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _funcname_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_funcname_)
            + ToString (_left_parenthesis_)
            + ToString (_parameters_)
            + ToString (_right_parenthesis_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _funcname_ == child )
        {
            _funcname_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _funcname_ == oldChild )
        {
            SetFuncname ((TId) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ASingleParamFormalParameters : PFormalParameters
{
    private TId _type_;
    private TId _param_;

    public ASingleParamFormalParameters ()
    {
    }

    public ASingleParamFormalParameters (
            TId _type_,
            TId _param_
    )
    {
        SetType (_type_);
        SetParam (_param_);
    }

    public override Object Clone()
    {
        return new ASingleParamFormalParameters (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleParamFormalParameters(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetParam ()
    {
        return _param_;
    }

    public void SetParam (TId node)
    {
        if(_param_ != null)
        {
            _param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _param_ == child )
        {
            _param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _param_ == oldChild )
        {
            SetParam ((TId) newChild);
            return;
        }
    }

}
public sealed class AMultipleParamsFormalParameters : PFormalParameters
{
    private TId _type_;
    private TId _param_;
    private TComma _comma_;
    private PFormalParameters _formal_parameters_;

    public AMultipleParamsFormalParameters ()
    {
    }

    public AMultipleParamsFormalParameters (
            TId _type_,
            TId _param_,
            TComma _comma_,
            PFormalParameters _formal_parameters_
    )
    {
        SetType (_type_);
        SetParam (_param_);
        SetComma (_comma_);
        SetFormalParameters (_formal_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleParamsFormalParameters (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_param_),
            (TComma)CloneNode (_comma_),
            (PFormalParameters)CloneNode (_formal_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleParamsFormalParameters(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetParam ()
    {
        return _param_;
    }

    public void SetParam (TId node)
    {
        if(_param_ != null)
        {
            _param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PFormalParameters GetFormalParameters ()
    {
        return _formal_parameters_;
    }

    public void SetFormalParameters (PFormalParameters node)
    {
        if(_formal_parameters_ != null)
        {
            _formal_parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _formal_parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_param_)
            + ToString (_comma_)
            + ToString (_formal_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _param_ == child )
        {
            _param_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _formal_parameters_ == child )
        {
            _formal_parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _param_ == oldChild )
        {
            SetParam ((TId) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _formal_parameters_ == oldChild )
        {
            SetFormalParameters ((PFormalParameters) newChild);
            return;
        }
    }

}
public sealed class ASingleParamParameters : PParameters
{
    private POrExp _or_exp_;

    public ASingleParamParameters ()
    {
    }

    public ASingleParamParameters (
            POrExp _or_exp_
    )
    {
        SetOrExp (_or_exp_);
    }

    public override Object Clone()
    {
        return new ASingleParamParameters (
            (POrExp)CloneNode (_or_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleParamParameters(this);
    }

    public POrExp GetOrExp ()
    {
        return _or_exp_;
    }

    public void SetOrExp (POrExp node)
    {
        if(_or_exp_ != null)
        {
            _or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_exp_ == child )
        {
            _or_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_exp_ == oldChild )
        {
            SetOrExp ((POrExp) newChild);
            return;
        }
    }

}
public sealed class AMultipleParamsParameters : PParameters
{
    private POrExp _or_exp_;
    private TComma _comma_;
    private PParameters _parameters_;

    public AMultipleParamsParameters ()
    {
    }

    public AMultipleParamsParameters (
            POrExp _or_exp_,
            TComma _comma_,
            PParameters _parameters_
    )
    {
        SetOrExp (_or_exp_);
        SetComma (_comma_);
        SetParameters (_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleParamsParameters (
            (POrExp)CloneNode (_or_exp_),
            (TComma)CloneNode (_comma_),
            (PParameters)CloneNode (_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleParamsParameters(this);
    }

    public POrExp GetOrExp ()
    {
        return _or_exp_;
    }

    public void SetOrExp (POrExp node)
    {
        if(_or_exp_ != null)
        {
            _or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_exp_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_exp_)
            + ToString (_comma_)
            + ToString (_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_exp_ == child )
        {
            _or_exp_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_exp_ == oldChild )
        {
            SetOrExp ((POrExp) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
    }

}
public sealed class AValueAssignStatement : PAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private POrExp _or_exp_;
    private TEol _eol_;

    public AValueAssignStatement ()
    {
    }

    public AValueAssignStatement (
            TId _id_,
            TAssign _assign_,
            POrExp _or_exp_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetOrExp (_or_exp_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AValueAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (POrExp)CloneNode (_or_exp_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAValueAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public POrExp GetOrExp ()
    {
        return _or_exp_;
    }

    public void SetOrExp (POrExp node)
    {
        if(_or_exp_ != null)
        {
            _or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_exp_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_or_exp_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _or_exp_ == child )
        {
            _or_exp_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _or_exp_ == oldChild )
        {
            SetOrExp ((POrExp) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctionAssignStatement : PAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private PFunctionCallStatement _function_call_statement_;

    public AFunctionAssignStatement ()
    {
    }

    public AFunctionAssignStatement (
            TId _id_,
            TAssign _assign_,
            PFunctionCallStatement _function_call_statement_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetFunctionCallStatement (_function_call_statement_);
    }

    public override Object Clone()
    {
        return new AFunctionAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PFunctionCallStatement)CloneNode (_function_call_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PFunctionCallStatement GetFunctionCallStatement ()
    {
        return _function_call_statement_;
    }

    public void SetFunctionCallStatement (PFunctionCallStatement node)
    {
        if(_function_call_statement_ != null)
        {
            _function_call_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_function_call_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _function_call_statement_ == child )
        {
            _function_call_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _function_call_statement_ == oldChild )
        {
            SetFunctionCallStatement ((PFunctionCallStatement) newChild);
            return;
        }
    }

}
public sealed class AIfStatement : PIfStatement
{
    private TIf _if_;
    private TLeftParenthesis _left_parenthesis_;
    private POrExp _or_exp_;
    private TRightParenthesis _right_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TCloseBrace _close_brace_;

    public AIfStatement ()
    {
    }

    public AIfStatement (
            TIf _if_,
            TLeftParenthesis _left_parenthesis_,
            POrExp _or_exp_,
            TRightParenthesis _right_parenthesis_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TCloseBrace _close_brace_
    )
    {
        SetIf (_if_);
        SetLeftParenthesis (_left_parenthesis_);
        SetOrExp (_or_exp_);
        SetRightParenthesis (_right_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AIfStatement (
            (TIf)CloneNode (_if_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (POrExp)CloneNode (_or_exp_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStatement(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public POrExp GetOrExp ()
    {
        return _or_exp_;
    }

    public void SetOrExp (POrExp node)
    {
        if(_or_exp_ != null)
        {
            _or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_exp_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_left_parenthesis_)
            + ToString (_or_exp_)
            + ToString (_right_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _or_exp_ == child )
        {
            _or_exp_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _or_exp_ == oldChild )
        {
            SetOrExp ((POrExp) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AElseStatement : PElseStatement
{
    private TIf _if_;
    private TLeftParenthesis _left_parenthesis_;
    private POrExp _or_exp_;
    private TRightParenthesis _right_parenthesis_;
    private TOpenBrace _one_;
    private PStatements _onetwoo_;
    private TCloseBrace _onetwo_;
    private TElse _else_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TCloseBrace _close_brace_;

    public AElseStatement ()
    {
    }

    public AElseStatement (
            TIf _if_,
            TLeftParenthesis _left_parenthesis_,
            POrExp _or_exp_,
            TRightParenthesis _right_parenthesis_,
            TOpenBrace _one_,
            PStatements _onetwoo_,
            TCloseBrace _onetwo_,
            TElse _else_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TCloseBrace _close_brace_
    )
    {
        SetIf (_if_);
        SetLeftParenthesis (_left_parenthesis_);
        SetOrExp (_or_exp_);
        SetRightParenthesis (_right_parenthesis_);
        SetOne (_one_);
        SetOnetwoo (_onetwoo_);
        SetOnetwo (_onetwo_);
        SetElse (_else_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AElseStatement (
            (TIf)CloneNode (_if_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (POrExp)CloneNode (_or_exp_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TOpenBrace)CloneNode (_one_),
            (PStatements)CloneNode (_onetwoo_),
            (TCloseBrace)CloneNode (_onetwo_),
            (TElse)CloneNode (_else_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElseStatement(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public POrExp GetOrExp ()
    {
        return _or_exp_;
    }

    public void SetOrExp (POrExp node)
    {
        if(_or_exp_ != null)
        {
            _or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_exp_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TOpenBrace GetOne ()
    {
        return _one_;
    }

    public void SetOne (TOpenBrace node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public PStatements GetOnetwoo ()
    {
        return _onetwoo_;
    }

    public void SetOnetwoo (PStatements node)
    {
        if(_onetwoo_ != null)
        {
            _onetwoo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _onetwoo_ = node;
    }
    public TCloseBrace GetOnetwo ()
    {
        return _onetwo_;
    }

    public void SetOnetwo (TCloseBrace node)
    {
        if(_onetwo_ != null)
        {
            _onetwo_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _onetwo_ = node;
    }
    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_left_parenthesis_)
            + ToString (_or_exp_)
            + ToString (_right_parenthesis_)
            + ToString (_one_)
            + ToString (_onetwoo_)
            + ToString (_onetwo_)
            + ToString (_else_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _or_exp_ == child )
        {
            _or_exp_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _onetwoo_ == child )
        {
            _onetwoo_ = null;
            return;
        }
        if ( _onetwo_ == child )
        {
            _onetwo_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _or_exp_ == oldChild )
        {
            SetOrExp ((POrExp) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _one_ == oldChild )
        {
            SetOne ((TOpenBrace) newChild);
            return;
        }
        if ( _onetwoo_ == oldChild )
        {
            SetOnetwoo ((PStatements) newChild);
            return;
        }
        if ( _onetwo_ == oldChild )
        {
            SetOnetwo ((TCloseBrace) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AWhileStatement : PWhileStatement
{
    private TWhile _while_;
    private TLeftParenthesis _left_parenthesis_;
    private POrExp _or_exp_;
    private TRightParenthesis _right_parenthesis_;
    private TOpenBrace _open_brace_;
    private PStatements _statements_;
    private TCloseBrace _close_brace_;

    public AWhileStatement ()
    {
    }

    public AWhileStatement (
            TWhile _while_,
            TLeftParenthesis _left_parenthesis_,
            POrExp _or_exp_,
            TRightParenthesis _right_parenthesis_,
            TOpenBrace _open_brace_,
            PStatements _statements_,
            TCloseBrace _close_brace_
    )
    {
        SetWhile (_while_);
        SetLeftParenthesis (_left_parenthesis_);
        SetOrExp (_or_exp_);
        SetRightParenthesis (_right_parenthesis_);
        SetOpenBrace (_open_brace_);
        SetStatements (_statements_);
        SetCloseBrace (_close_brace_);
    }

    public override Object Clone()
    {
        return new AWhileStatement (
            (TWhile)CloneNode (_while_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (POrExp)CloneNode (_or_exp_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TOpenBrace)CloneNode (_open_brace_),
            (PStatements)CloneNode (_statements_),
            (TCloseBrace)CloneNode (_close_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStatement(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public POrExp GetOrExp ()
    {
        return _or_exp_;
    }

    public void SetOrExp (POrExp node)
    {
        if(_or_exp_ != null)
        {
            _or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_exp_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TOpenBrace GetOpenBrace ()
    {
        return _open_brace_;
    }

    public void SetOpenBrace (TOpenBrace node)
    {
        if(_open_brace_ != null)
        {
            _open_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_brace_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TCloseBrace GetCloseBrace ()
    {
        return _close_brace_;
    }

    public void SetCloseBrace (TCloseBrace node)
    {
        if(_close_brace_ != null)
        {
            _close_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_left_parenthesis_)
            + ToString (_or_exp_)
            + ToString (_right_parenthesis_)
            + ToString (_open_brace_)
            + ToString (_statements_)
            + ToString (_close_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _or_exp_ == child )
        {
            _or_exp_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _open_brace_ == child )
        {
            _open_brace_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _close_brace_ == child )
        {
            _close_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _or_exp_ == oldChild )
        {
            SetOrExp ((POrExp) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _open_brace_ == oldChild )
        {
            SetOpenBrace ((TOpenBrace) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _close_brace_ == oldChild )
        {
            SetCloseBrace ((TCloseBrace) newChild);
            return;
        }
    }

}
public sealed class AOrOrExp : POrExp
{
    private POrExp _or_exp_;
    private TOr _or_;
    private PAndExp _and_exp_;

    public AOrOrExp ()
    {
    }

    public AOrOrExp (
            POrExp _or_exp_,
            TOr _or_,
            PAndExp _and_exp_
    )
    {
        SetOrExp (_or_exp_);
        SetOr (_or_);
        SetAndExp (_and_exp_);
    }

    public override Object Clone()
    {
        return new AOrOrExp (
            (POrExp)CloneNode (_or_exp_),
            (TOr)CloneNode (_or_),
            (PAndExp)CloneNode (_and_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrOrExp(this);
    }

    public POrExp GetOrExp ()
    {
        return _or_exp_;
    }

    public void SetOrExp (POrExp node)
    {
        if(_or_exp_ != null)
        {
            _or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_exp_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PAndExp GetAndExp ()
    {
        return _and_exp_;
    }

    public void SetAndExp (PAndExp node)
    {
        if(_and_exp_ != null)
        {
            _and_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_exp_)
            + ToString (_or_)
            + ToString (_and_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_exp_ == child )
        {
            _or_exp_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _and_exp_ == child )
        {
            _and_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_exp_ == oldChild )
        {
            SetOrExp ((POrExp) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _and_exp_ == oldChild )
        {
            SetAndExp ((PAndExp) newChild);
            return;
        }
    }

}
public sealed class APassOrExp : POrExp
{
    private PAndExp _and_exp_;

    public APassOrExp ()
    {
    }

    public APassOrExp (
            PAndExp _and_exp_
    )
    {
        SetAndExp (_and_exp_);
    }

    public override Object Clone()
    {
        return new APassOrExp (
            (PAndExp)CloneNode (_and_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassOrExp(this);
    }

    public PAndExp GetAndExp ()
    {
        return _and_exp_;
    }

    public void SetAndExp (PAndExp node)
    {
        if(_and_exp_ != null)
        {
            _and_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_exp_ == child )
        {
            _and_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_exp_ == oldChild )
        {
            SetAndExp ((PAndExp) newChild);
            return;
        }
    }

}
public sealed class AAndAndExp : PAndExp
{
    private PAndExp _and_exp_;
    private TAnd _and_;
    private PNotExp _not_exp_;

    public AAndAndExp ()
    {
    }

    public AAndAndExp (
            PAndExp _and_exp_,
            TAnd _and_,
            PNotExp _not_exp_
    )
    {
        SetAndExp (_and_exp_);
        SetAnd (_and_);
        SetNotExp (_not_exp_);
    }

    public override Object Clone()
    {
        return new AAndAndExp (
            (PAndExp)CloneNode (_and_exp_),
            (TAnd)CloneNode (_and_),
            (PNotExp)CloneNode (_not_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndAndExp(this);
    }

    public PAndExp GetAndExp ()
    {
        return _and_exp_;
    }

    public void SetAndExp (PAndExp node)
    {
        if(_and_exp_ != null)
        {
            _and_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_exp_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PNotExp GetNotExp ()
    {
        return _not_exp_;
    }

    public void SetNotExp (PNotExp node)
    {
        if(_not_exp_ != null)
        {
            _not_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_exp_)
            + ToString (_and_)
            + ToString (_not_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_exp_ == child )
        {
            _and_exp_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _not_exp_ == child )
        {
            _not_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_exp_ == oldChild )
        {
            SetAndExp ((PAndExp) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _not_exp_ == oldChild )
        {
            SetNotExp ((PNotExp) newChild);
            return;
        }
    }

}
public sealed class APassAndExp : PAndExp
{
    private PNotExp _not_exp_;

    public APassAndExp ()
    {
    }

    public APassAndExp (
            PNotExp _not_exp_
    )
    {
        SetNotExp (_not_exp_);
    }

    public override Object Clone()
    {
        return new APassAndExp (
            (PNotExp)CloneNode (_not_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassAndExp(this);
    }

    public PNotExp GetNotExp ()
    {
        return _not_exp_;
    }

    public void SetNotExp (PNotExp node)
    {
        if(_not_exp_ != null)
        {
            _not_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_exp_ == child )
        {
            _not_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_exp_ == oldChild )
        {
            SetNotExp ((PNotExp) newChild);
            return;
        }
    }

}
public sealed class ANotNotExp : PNotExp
{
    private TNot _not_;
    private PCompExpEq _comp_exp_eq_;

    public ANotNotExp ()
    {
    }

    public ANotNotExp (
            TNot _not_,
            PCompExpEq _comp_exp_eq_
    )
    {
        SetNot (_not_);
        SetCompExpEq (_comp_exp_eq_);
    }

    public override Object Clone()
    {
        return new ANotNotExp (
            (TNot)CloneNode (_not_),
            (PCompExpEq)CloneNode (_comp_exp_eq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotNotExp(this);
    }

    public TNot GetNot ()
    {
        return _not_;
    }

    public void SetNot (TNot node)
    {
        if(_not_ != null)
        {
            _not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_ = node;
    }
    public PCompExpEq GetCompExpEq ()
    {
        return _comp_exp_eq_;
    }

    public void SetCompExpEq (PCompExpEq node)
    {
        if(_comp_exp_eq_ != null)
        {
            _comp_exp_eq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comp_exp_eq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_)
            + ToString (_comp_exp_eq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_ == child )
        {
            _not_ = null;
            return;
        }
        if ( _comp_exp_eq_ == child )
        {
            _comp_exp_eq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_ == oldChild )
        {
            SetNot ((TNot) newChild);
            return;
        }
        if ( _comp_exp_eq_ == oldChild )
        {
            SetCompExpEq ((PCompExpEq) newChild);
            return;
        }
    }

}
public sealed class APassNotExp : PNotExp
{
    private PCompExpEq _comp_exp_eq_;

    public APassNotExp ()
    {
    }

    public APassNotExp (
            PCompExpEq _comp_exp_eq_
    )
    {
        SetCompExpEq (_comp_exp_eq_);
    }

    public override Object Clone()
    {
        return new APassNotExp (
            (PCompExpEq)CloneNode (_comp_exp_eq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassNotExp(this);
    }

    public PCompExpEq GetCompExpEq ()
    {
        return _comp_exp_eq_;
    }

    public void SetCompExpEq (PCompExpEq node)
    {
        if(_comp_exp_eq_ != null)
        {
            _comp_exp_eq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comp_exp_eq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comp_exp_eq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comp_exp_eq_ == child )
        {
            _comp_exp_eq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comp_exp_eq_ == oldChild )
        {
            SetCompExpEq ((PCompExpEq) newChild);
            return;
        }
    }

}
public sealed class AEqCompExpEq : PCompExpEq
{
    private PExp0 _left_;
    private TEq _eq_;
    private PExp0 _right_;

    public AEqCompExpEq ()
    {
    }

    public AEqCompExpEq (
            PExp0 _left_,
            TEq _eq_,
            PExp0 _right_
    )
    {
        SetLeft (_left_);
        SetEq (_eq_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AEqCompExpEq (
            (PExp0)CloneNode (_left_),
            (TEq)CloneNode (_eq_),
            (PExp0)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqCompExpEq(this);
    }

    public PExp0 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp0 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TEq GetEq ()
    {
        return _eq_;
    }

    public void SetEq (TEq node)
    {
        if(_eq_ != null)
        {
            _eq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eq_ = node;
    }
    public PExp0 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp0 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_eq_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _eq_ == child )
        {
            _eq_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp0) newChild);
            return;
        }
        if ( _eq_ == oldChild )
        {
            SetEq ((TEq) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp0) newChild);
            return;
        }
    }

}
public sealed class ANeqCompExpEq : PCompExpEq
{
    private PExp0 _left_;
    private TNeq _neq_;
    private PExp0 _right_;

    public ANeqCompExpEq ()
    {
    }

    public ANeqCompExpEq (
            PExp0 _left_,
            TNeq _neq_,
            PExp0 _right_
    )
    {
        SetLeft (_left_);
        SetNeq (_neq_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ANeqCompExpEq (
            (PExp0)CloneNode (_left_),
            (TNeq)CloneNode (_neq_),
            (PExp0)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANeqCompExpEq(this);
    }

    public PExp0 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp0 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TNeq GetNeq ()
    {
        return _neq_;
    }

    public void SetNeq (TNeq node)
    {
        if(_neq_ != null)
        {
            _neq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _neq_ = node;
    }
    public PExp0 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp0 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_neq_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _neq_ == child )
        {
            _neq_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp0) newChild);
            return;
        }
        if ( _neq_ == oldChild )
        {
            SetNeq ((TNeq) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp0) newChild);
            return;
        }
    }

}
public sealed class APassCompExpEq : PCompExpEq
{
    private PCompExpLtgt _comp_exp_ltgt_;

    public APassCompExpEq ()
    {
    }

    public APassCompExpEq (
            PCompExpLtgt _comp_exp_ltgt_
    )
    {
        SetCompExpLtgt (_comp_exp_ltgt_);
    }

    public override Object Clone()
    {
        return new APassCompExpEq (
            (PCompExpLtgt)CloneNode (_comp_exp_ltgt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassCompExpEq(this);
    }

    public PCompExpLtgt GetCompExpLtgt ()
    {
        return _comp_exp_ltgt_;
    }

    public void SetCompExpLtgt (PCompExpLtgt node)
    {
        if(_comp_exp_ltgt_ != null)
        {
            _comp_exp_ltgt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comp_exp_ltgt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comp_exp_ltgt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comp_exp_ltgt_ == child )
        {
            _comp_exp_ltgt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comp_exp_ltgt_ == oldChild )
        {
            SetCompExpLtgt ((PCompExpLtgt) newChild);
            return;
        }
    }

}
public sealed class ALtCompExpLtgt : PCompExpLtgt
{
    private PExp0 _left_;
    private TLt _lt_;
    private PExp0 _right_;

    public ALtCompExpLtgt ()
    {
    }

    public ALtCompExpLtgt (
            PExp0 _left_,
            TLt _lt_,
            PExp0 _right_
    )
    {
        SetLeft (_left_);
        SetLt (_lt_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ALtCompExpLtgt (
            (PExp0)CloneNode (_left_),
            (TLt)CloneNode (_lt_),
            (PExp0)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALtCompExpLtgt(this);
    }

    public PExp0 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp0 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TLt GetLt ()
    {
        return _lt_;
    }

    public void SetLt (TLt node)
    {
        if(_lt_ != null)
        {
            _lt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lt_ = node;
    }
    public PExp0 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp0 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_lt_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _lt_ == child )
        {
            _lt_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp0) newChild);
            return;
        }
        if ( _lt_ == oldChild )
        {
            SetLt ((TLt) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp0) newChild);
            return;
        }
    }

}
public sealed class ALteCompExpLtgt : PCompExpLtgt
{
    private PExp0 _left_;
    private TLte _lte_;
    private PExp0 _right_;

    public ALteCompExpLtgt ()
    {
    }

    public ALteCompExpLtgt (
            PExp0 _left_,
            TLte _lte_,
            PExp0 _right_
    )
    {
        SetLeft (_left_);
        SetLte (_lte_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new ALteCompExpLtgt (
            (PExp0)CloneNode (_left_),
            (TLte)CloneNode (_lte_),
            (PExp0)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALteCompExpLtgt(this);
    }

    public PExp0 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp0 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TLte GetLte ()
    {
        return _lte_;
    }

    public void SetLte (TLte node)
    {
        if(_lte_ != null)
        {
            _lte_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lte_ = node;
    }
    public PExp0 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp0 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_lte_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _lte_ == child )
        {
            _lte_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp0) newChild);
            return;
        }
        if ( _lte_ == oldChild )
        {
            SetLte ((TLte) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp0) newChild);
            return;
        }
    }

}
public sealed class AGtCompExpLtgt : PCompExpLtgt
{
    private PExp0 _left_;
    private TGt _gt_;
    private PExp0 _right_;

    public AGtCompExpLtgt ()
    {
    }

    public AGtCompExpLtgt (
            PExp0 _left_,
            TGt _gt_,
            PExp0 _right_
    )
    {
        SetLeft (_left_);
        SetGt (_gt_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AGtCompExpLtgt (
            (PExp0)CloneNode (_left_),
            (TGt)CloneNode (_gt_),
            (PExp0)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGtCompExpLtgt(this);
    }

    public PExp0 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp0 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TGt GetGt ()
    {
        return _gt_;
    }

    public void SetGt (TGt node)
    {
        if(_gt_ != null)
        {
            _gt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _gt_ = node;
    }
    public PExp0 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp0 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_gt_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _gt_ == child )
        {
            _gt_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp0) newChild);
            return;
        }
        if ( _gt_ == oldChild )
        {
            SetGt ((TGt) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp0) newChild);
            return;
        }
    }

}
public sealed class AGteCompExpLtgt : PCompExpLtgt
{
    private PExp0 _left_;
    private TGte _gte_;
    private PExp0 _right_;

    public AGteCompExpLtgt ()
    {
    }

    public AGteCompExpLtgt (
            PExp0 _left_,
            TGte _gte_,
            PExp0 _right_
    )
    {
        SetLeft (_left_);
        SetGte (_gte_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AGteCompExpLtgt (
            (PExp0)CloneNode (_left_),
            (TGte)CloneNode (_gte_),
            (PExp0)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGteCompExpLtgt(this);
    }

    public PExp0 GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PExp0 node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public TGte GetGte ()
    {
        return _gte_;
    }

    public void SetGte (TGte node)
    {
        if(_gte_ != null)
        {
            _gte_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _gte_ = node;
    }
    public PExp0 GetRight ()
    {
        return _right_;
    }

    public void SetRight (PExp0 node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_gte_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _gte_ == child )
        {
            _gte_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PExp0) newChild);
            return;
        }
        if ( _gte_ == oldChild )
        {
            SetGte ((TGte) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PExp0) newChild);
            return;
        }
    }

}
public sealed class APassCompExpLtgt : PCompExpLtgt
{
    private PExp0 _exp0_;

    public APassCompExpLtgt ()
    {
    }

    public APassCompExpLtgt (
            PExp0 _exp0_
    )
    {
        SetExp0 (_exp0_);
    }

    public override Object Clone()
    {
        return new APassCompExpLtgt (
            (PExp0)CloneNode (_exp0_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassCompExpLtgt(this);
    }

    public PExp0 GetExp0 ()
    {
        return _exp0_;
    }

    public void SetExp0 (PExp0 node)
    {
        if(_exp0_ != null)
        {
            _exp0_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp0_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp0_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp0_ == child )
        {
            _exp0_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp0_ == oldChild )
        {
            SetExp0 ((PExp0) newChild);
            return;
        }
    }

}
public sealed class AAddExp0 : PExp0
{
    private PExp0 _exp0_;
    private TPlus _plus_;
    private PExp1 _exp1_;

    public AAddExp0 ()
    {
    }

    public AAddExp0 (
            PExp0 _exp0_,
            TPlus _plus_,
            PExp1 _exp1_
    )
    {
        SetExp0 (_exp0_);
        SetPlus (_plus_);
        SetExp1 (_exp1_);
    }

    public override Object Clone()
    {
        return new AAddExp0 (
            (PExp0)CloneNode (_exp0_),
            (TPlus)CloneNode (_plus_),
            (PExp1)CloneNode (_exp1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExp0(this);
    }

    public PExp0 GetExp0 ()
    {
        return _exp0_;
    }

    public void SetExp0 (PExp0 node)
    {
        if(_exp0_ != null)
        {
            _exp0_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp0_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExp1 GetExp1 ()
    {
        return _exp1_;
    }

    public void SetExp1 (PExp1 node)
    {
        if(_exp1_ != null)
        {
            _exp1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp0_)
            + ToString (_plus_)
            + ToString (_exp1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp0_ == child )
        {
            _exp0_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _exp1_ == child )
        {
            _exp1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp0_ == oldChild )
        {
            SetExp0 ((PExp0) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _exp1_ == oldChild )
        {
            SetExp1 ((PExp1) newChild);
            return;
        }
    }

}
public sealed class ASubExp0 : PExp0
{
    private PExp0 _exp0_;
    private TMinus _minus_;
    private PExp1 _exp1_;

    public ASubExp0 ()
    {
    }

    public ASubExp0 (
            PExp0 _exp0_,
            TMinus _minus_,
            PExp1 _exp1_
    )
    {
        SetExp0 (_exp0_);
        SetMinus (_minus_);
        SetExp1 (_exp1_);
    }

    public override Object Clone()
    {
        return new ASubExp0 (
            (PExp0)CloneNode (_exp0_),
            (TMinus)CloneNode (_minus_),
            (PExp1)CloneNode (_exp1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubExp0(this);
    }

    public PExp0 GetExp0 ()
    {
        return _exp0_;
    }

    public void SetExp0 (PExp0 node)
    {
        if(_exp0_ != null)
        {
            _exp0_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp0_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExp1 GetExp1 ()
    {
        return _exp1_;
    }

    public void SetExp1 (PExp1 node)
    {
        if(_exp1_ != null)
        {
            _exp1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp0_)
            + ToString (_minus_)
            + ToString (_exp1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp0_ == child )
        {
            _exp0_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _exp1_ == child )
        {
            _exp1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp0_ == oldChild )
        {
            SetExp0 ((PExp0) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _exp1_ == oldChild )
        {
            SetExp1 ((PExp1) newChild);
            return;
        }
    }

}
public sealed class APassExp0 : PExp0
{
    private PExp1 _exp1_;

    public APassExp0 ()
    {
    }

    public APassExp0 (
            PExp1 _exp1_
    )
    {
        SetExp1 (_exp1_);
    }

    public override Object Clone()
    {
        return new APassExp0 (
            (PExp1)CloneNode (_exp1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExp0(this);
    }

    public PExp1 GetExp1 ()
    {
        return _exp1_;
    }

    public void SetExp1 (PExp1 node)
    {
        if(_exp1_ != null)
        {
            _exp1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp1_ == child )
        {
            _exp1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp1_ == oldChild )
        {
            SetExp1 ((PExp1) newChild);
            return;
        }
    }

}
public sealed class AMultiplyExp1 : PExp1
{
    private PExp1 _exp1_;
    private TMult _mult_;
    private PExp2 _exp2_;

    public AMultiplyExp1 ()
    {
    }

    public AMultiplyExp1 (
            PExp1 _exp1_,
            TMult _mult_,
            PExp2 _exp2_
    )
    {
        SetExp1 (_exp1_);
        SetMult (_mult_);
        SetExp2 (_exp2_);
    }

    public override Object Clone()
    {
        return new AMultiplyExp1 (
            (PExp1)CloneNode (_exp1_),
            (TMult)CloneNode (_mult_),
            (PExp2)CloneNode (_exp2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyExp1(this);
    }

    public PExp1 GetExp1 ()
    {
        return _exp1_;
    }

    public void SetExp1 (PExp1 node)
    {
        if(_exp1_ != null)
        {
            _exp1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp1_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PExp2 GetExp2 ()
    {
        return _exp2_;
    }

    public void SetExp2 (PExp2 node)
    {
        if(_exp2_ != null)
        {
            _exp2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp1_)
            + ToString (_mult_)
            + ToString (_exp2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp1_ == child )
        {
            _exp1_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _exp2_ == child )
        {
            _exp2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp1_ == oldChild )
        {
            SetExp1 ((PExp1) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _exp2_ == oldChild )
        {
            SetExp2 ((PExp2) newChild);
            return;
        }
    }

}
public sealed class ADivideExp1 : PExp1
{
    private PExp1 _exp1_;
    private TDiv _div_;
    private PExp2 _exp2_;

    public ADivideExp1 ()
    {
    }

    public ADivideExp1 (
            PExp1 _exp1_,
            TDiv _div_,
            PExp2 _exp2_
    )
    {
        SetExp1 (_exp1_);
        SetDiv (_div_);
        SetExp2 (_exp2_);
    }

    public override Object Clone()
    {
        return new ADivideExp1 (
            (PExp1)CloneNode (_exp1_),
            (TDiv)CloneNode (_div_),
            (PExp2)CloneNode (_exp2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideExp1(this);
    }

    public PExp1 GetExp1 ()
    {
        return _exp1_;
    }

    public void SetExp1 (PExp1 node)
    {
        if(_exp1_ != null)
        {
            _exp1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp1_ = node;
    }
    public TDiv GetDiv ()
    {
        return _div_;
    }

    public void SetDiv (TDiv node)
    {
        if(_div_ != null)
        {
            _div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _div_ = node;
    }
    public PExp2 GetExp2 ()
    {
        return _exp2_;
    }

    public void SetExp2 (PExp2 node)
    {
        if(_exp2_ != null)
        {
            _exp2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp1_)
            + ToString (_div_)
            + ToString (_exp2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp1_ == child )
        {
            _exp1_ = null;
            return;
        }
        if ( _div_ == child )
        {
            _div_ = null;
            return;
        }
        if ( _exp2_ == child )
        {
            _exp2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp1_ == oldChild )
        {
            SetExp1 ((PExp1) newChild);
            return;
        }
        if ( _div_ == oldChild )
        {
            SetDiv ((TDiv) newChild);
            return;
        }
        if ( _exp2_ == oldChild )
        {
            SetExp2 ((PExp2) newChild);
            return;
        }
    }

}
public sealed class APassExp1 : PExp1
{
    private PExp2 _exp2_;

    public APassExp1 ()
    {
    }

    public APassExp1 (
            PExp2 _exp2_
    )
    {
        SetExp2 (_exp2_);
    }

    public override Object Clone()
    {
        return new APassExp1 (
            (PExp2)CloneNode (_exp2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExp1(this);
    }

    public PExp2 GetExp2 ()
    {
        return _exp2_;
    }

    public void SetExp2 (PExp2 node)
    {
        if(_exp2_ != null)
        {
            _exp2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp2_ == child )
        {
            _exp2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp2_ == oldChild )
        {
            SetExp2 ((PExp2) newChild);
            return;
        }
    }

}
public sealed class ANegativeExp2 : PExp2
{
    private TMinus _minus_;
    private PExp3 _exp3_;

    public ANegativeExp2 ()
    {
    }

    public ANegativeExp2 (
            TMinus _minus_,
            PExp3 _exp3_
    )
    {
        SetMinus (_minus_);
        SetExp3 (_exp3_);
    }

    public override Object Clone()
    {
        return new ANegativeExp2 (
            (TMinus)CloneNode (_minus_),
            (PExp3)CloneNode (_exp3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegativeExp2(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExp3 GetExp3 ()
    {
        return _exp3_;
    }

    public void SetExp3 (PExp3 node)
    {
        if(_exp3_ != null)
        {
            _exp3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_exp3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _exp3_ == child )
        {
            _exp3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _exp3_ == oldChild )
        {
            SetExp3 ((PExp3) newChild);
            return;
        }
    }

}
public sealed class APassExp2 : PExp2
{
    private PExp3 _exp3_;

    public APassExp2 ()
    {
    }

    public APassExp2 (
            PExp3 _exp3_
    )
    {
        SetExp3 (_exp3_);
    }

    public override Object Clone()
    {
        return new APassExp2 (
            (PExp3)CloneNode (_exp3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExp2(this);
    }

    public PExp3 GetExp3 ()
    {
        return _exp3_;
    }

    public void SetExp3 (PExp3 node)
    {
        if(_exp3_ != null)
        {
            _exp3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp3_ == child )
        {
            _exp3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp3_ == oldChild )
        {
            SetExp3 ((PExp3) newChild);
            return;
        }
    }

}
public sealed class AParenthesisExp3 : PExp3
{
    private TLeftParenthesis _left_parenthesis_;
    private POrExp _or_exp_;
    private TRightParenthesis _right_parenthesis_;

    public AParenthesisExp3 ()
    {
    }

    public AParenthesisExp3 (
            TLeftParenthesis _left_parenthesis_,
            POrExp _or_exp_,
            TRightParenthesis _right_parenthesis_
    )
    {
        SetLeftParenthesis (_left_parenthesis_);
        SetOrExp (_or_exp_);
        SetRightParenthesis (_right_parenthesis_);
    }

    public override Object Clone()
    {
        return new AParenthesisExp3 (
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (POrExp)CloneNode (_or_exp_),
            (TRightParenthesis)CloneNode (_right_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthesisExp3(this);
    }

    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public POrExp GetOrExp ()
    {
        return _or_exp_;
    }

    public void SetOrExp (POrExp node)
    {
        if(_or_exp_ != null)
        {
            _or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_exp_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_parenthesis_)
            + ToString (_or_exp_)
            + ToString (_right_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _or_exp_ == child )
        {
            _or_exp_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _or_exp_ == oldChild )
        {
            SetOrExp ((POrExp) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
    }

}
public sealed class APassExp3 : PExp3
{
    private POperand _operand_;

    public APassExp3 ()
    {
    }

    public APassExp3 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassExp3 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExp3(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class ADoubleOperand : POperand
{
    private TDouble _double_;

    public ADoubleOperand ()
    {
    }

    public ADoubleOperand (
            TDouble _double_
    )
    {
        SetDouble (_double_);
    }

    public override Object Clone()
    {
        return new ADoubleOperand (
            (TDouble)CloneNode (_double_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADoubleOperand(this);
    }

    public TDouble GetDouble ()
    {
        return _double_;
    }

    public void SetDouble (TDouble node)
    {
        if(_double_ != null)
        {
            _double_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _double_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_double_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _double_ == child )
        {
            _double_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _double_ == oldChild )
        {
            SetDouble ((TDouble) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AStringOperand : POperand
{
    private TString _string_;

    public AStringOperand ()
    {
    }

    public AStringOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
