/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseASingleStatements(ASingleStatements node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseACallStatement(ACallStatement node);
    void CaseAMainStatement(AMainStatement node);
    void CaseAIfStmtStatement(AIfStmtStatement node);
    void CaseAElseStmtStatement(AElseStmtStatement node);
    void CaseAWhileStmtStatement(AWhileStmtStatement node);
    void CaseAFuncDeclarationStatement(AFuncDeclarationStatement node);
    void CaseANoAssignDeclareStatement(ANoAssignDeclareStatement node);
    void CaseAAssignDeclareStatement(AAssignDeclareStatement node);
    void CaseAAssignFunctionDeclareStatement(AAssignFunctionDeclareStatement node);
    void CaseAConstConstantDeclareStatement(AConstConstantDeclareStatement node);
    void CaseAMainFunctionCall(AMainFunctionCall node);
    void CaseANoParamMainFunctionCall(ANoParamMainFunctionCall node);
    void CaseAWithPromiseFunctionDeclarationStatement(AWithPromiseFunctionDeclarationStatement node);
    void CaseAWithoutPromiseFunctionDeclarationStatement(AWithoutPromiseFunctionDeclarationStatement node);
    void CaseAFunctionCallStatement(AFunctionCallStatement node);
    void CaseASingleParamFormalParameters(ASingleParamFormalParameters node);
    void CaseAMultipleParamsFormalParameters(AMultipleParamsFormalParameters node);
    void CaseASingleParamParameters(ASingleParamParameters node);
    void CaseAMultipleParamsParameters(AMultipleParamsParameters node);
    void CaseAValueAssignStatement(AValueAssignStatement node);
    void CaseAFunctionAssignStatement(AFunctionAssignStatement node);
    void CaseAIfStatement(AIfStatement node);
    void CaseAElseStatement(AElseStatement node);
    void CaseAWhileStatement(AWhileStatement node);
    void CaseAOrOrExp(AOrOrExp node);
    void CaseAPassOrExp(APassOrExp node);
    void CaseAAndAndExp(AAndAndExp node);
    void CaseAPassAndExp(APassAndExp node);
    void CaseANotNotExp(ANotNotExp node);
    void CaseAPassNotExp(APassNotExp node);
    void CaseAEqCompExpEq(AEqCompExpEq node);
    void CaseANeqCompExpEq(ANeqCompExpEq node);
    void CaseAPassCompExpEq(APassCompExpEq node);
    void CaseALtCompExpLtgt(ALtCompExpLtgt node);
    void CaseALteCompExpLtgt(ALteCompExpLtgt node);
    void CaseAGtCompExpLtgt(AGtCompExpLtgt node);
    void CaseAGteCompExpLtgt(AGteCompExpLtgt node);
    void CaseAPassCompExpLtgt(APassCompExpLtgt node);
    void CaseAAddExp0(AAddExp0 node);
    void CaseASubExp0(ASubExp0 node);
    void CaseAPassExp0(APassExp0 node);
    void CaseAMultiplyExp1(AMultiplyExp1 node);
    void CaseADivideExp1(ADivideExp1 node);
    void CaseAPassExp1(APassExp1 node);
    void CaseANegativeExp2(ANegativeExp2 node);
    void CaseAPassExp2(APassExp2 node);
    void CaseAParenthesisExp3(AParenthesisExp3 node);
    void CaseAPassExp3(APassExp3 node);
    void CaseAIntOperand(AIntOperand node);
    void CaseADoubleOperand(ADoubleOperand node);
    void CaseAVariableOperand(AVariableOperand node);
    void CaseAStringOperand(AStringOperand node);

    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTMult(TMult node);
    void CaseTDiv(TDiv node);
    void CaseTEol(TEol node);
    void CaseTComma(TComma node);
    void CaseTPromise(TPromise node);
    void CaseTLeftParenthesis(TLeftParenthesis node);
    void CaseTRightParenthesis(TRightParenthesis node);
    void CaseTOpenBrace(TOpenBrace node);
    void CaseTCloseBrace(TCloseBrace node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTLt(TLt node);
    void CaseTGt(TGt node);
    void CaseTLte(TLte node);
    void CaseTGte(TGte node);
    void CaseTEq(TEq node);
    void CaseTNeq(TNeq node);
    void CaseTWhile(TWhile node);
    void CaseTIf(TIf node);
    void CaseTElif(TElif node);
    void CaseTElse(TElse node);
    void CaseTReturn(TReturn node);
    void CaseTMain(TMain node);
    void CaseTConstant(TConstant node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTDouble(TDouble node);
    void CaseTInteger(TInteger node);
    void CaseTString(TString node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleStatements(ASingleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallStatement(ACallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainStatement(AMainStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStmtStatement(AIfStmtStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElseStmtStatement(AElseStmtStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStmtStatement(AWhileStmtStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFuncDeclarationStatement(AFuncDeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoAssignDeclareStatement(ANoAssignDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignDeclareStatement(AAssignDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignFunctionDeclareStatement(AAssignFunctionDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstConstantDeclareStatement(AConstConstantDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainFunctionCall(AMainFunctionCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoParamMainFunctionCall(ANoParamMainFunctionCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWithPromiseFunctionDeclarationStatement(AWithPromiseFunctionDeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWithoutPromiseFunctionDeclarationStatement(AWithoutPromiseFunctionDeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleParamFormalParameters(ASingleParamFormalParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleParamsFormalParameters(AMultipleParamsFormalParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleParamParameters(ASingleParamParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleParamsParameters(AMultipleParamsParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAValueAssignStatement(AValueAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionAssignStatement(AFunctionAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatement(AIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElseStatement(AElseStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatement(AWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrOrExp(AOrOrExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassOrExp(APassOrExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndAndExp(AAndAndExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassAndExp(APassAndExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotNotExp(ANotNotExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassNotExp(APassNotExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqCompExpEq(AEqCompExpEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANeqCompExpEq(ANeqCompExpEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassCompExpEq(APassCompExpEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALtCompExpLtgt(ALtCompExpLtgt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALteCompExpLtgt(ALteCompExpLtgt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGtCompExpLtgt(AGtCompExpLtgt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGteCompExpLtgt(AGteCompExpLtgt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassCompExpLtgt(APassCompExpLtgt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExp0(AAddExp0 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubExp0(ASubExp0 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExp0(APassExp0 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyExp1(AMultiplyExp1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideExp1(ADivideExp1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExp1(APassExp1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegativeExp2(ANegativeExp2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExp2(APassExp2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthesisExp3(AParenthesisExp3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExp3(APassExp3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADoubleOperand(ADoubleOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringOperand(AStringOperand node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDiv(TDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPromise(TPromise node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftParenthesis(TLeftParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightParenthesis(TRightParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenBrace(TOpenBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseBrace(TCloseBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLt(TLt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGt(TGt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLte(TLte node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGte(TGte node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEq(TEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNeq(TNeq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElif(TElif node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstant(TConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDouble(TDouble node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        {
            Object[] temp = new Object[node.GetConstantDeclareStatement().Count];
            node.GetConstantDeclareStatement().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PConstantDeclareStatement) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetFunctionDeclarationStatement().Count];
            node.GetFunctionDeclarationStatement().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PFunctionDeclarationStatement) temp[i]).Apply(this);
            }
        }
        if(node.GetMainFunctionCall() != null)
        {
            node.GetMainFunctionCall().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAMainStatement(AMainStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainStatement(AMainStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainStatement(AMainStatement node)
    {
        InAMainStatement(node);
        if(node.GetMainFunctionCall() != null)
        {
            node.GetMainFunctionCall().Apply(this);
        }
        OutAMainStatement(node);
    }
    public virtual void InAIfStmtStatement(AIfStmtStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStmtStatement(AIfStmtStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStmtStatement(AIfStmtStatement node)
    {
        InAIfStmtStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfStmtStatement(node);
    }
    public virtual void InAElseStmtStatement(AElseStmtStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseStmtStatement(AElseStmtStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseStmtStatement(AElseStmtStatement node)
    {
        InAElseStmtStatement(node);
        if(node.GetElseStatement() != null)
        {
            node.GetElseStatement().Apply(this);
        }
        OutAElseStmtStatement(node);
    }
    public virtual void InAWhileStmtStatement(AWhileStmtStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStmtStatement(AWhileStmtStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStmtStatement(AWhileStmtStatement node)
    {
        InAWhileStmtStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileStmtStatement(node);
    }
    public virtual void InAFuncDeclarationStatement(AFuncDeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncDeclarationStatement(AFuncDeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncDeclarationStatement(AFuncDeclarationStatement node)
    {
        InAFuncDeclarationStatement(node);
        if(node.GetFunctionDeclarationStatement() != null)
        {
            node.GetFunctionDeclarationStatement().Apply(this);
        }
        OutAFuncDeclarationStatement(node);
    }
    public virtual void InANoAssignDeclareStatement(ANoAssignDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoAssignDeclareStatement(ANoAssignDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseANoAssignDeclareStatement(ANoAssignDeclareStatement node)
    {
        InANoAssignDeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutANoAssignDeclareStatement(node);
    }
    public virtual void InAAssignDeclareStatement(AAssignDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignDeclareStatement(AAssignDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignDeclareStatement(AAssignDeclareStatement node)
    {
        InAAssignDeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignDeclareStatement(node);
    }
    public virtual void InAAssignFunctionDeclareStatement(AAssignFunctionDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignFunctionDeclareStatement(AAssignFunctionDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignFunctionDeclareStatement(AAssignFunctionDeclareStatement node)
    {
        InAAssignFunctionDeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutAAssignFunctionDeclareStatement(node);
    }
    public virtual void InAConstConstantDeclareStatement(AConstConstantDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstConstantDeclareStatement(AConstConstantDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstConstantDeclareStatement(AConstConstantDeclareStatement node)
    {
        InAConstConstantDeclareStatement(node);
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAConstConstantDeclareStatement(node);
    }
    public virtual void InAMainFunctionCall(AMainFunctionCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunctionCall(AMainFunctionCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunctionCall(AMainFunctionCall node)
    {
        InAMainFunctionCall(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAMainFunctionCall(node);
    }
    public virtual void InANoParamMainFunctionCall(ANoParamMainFunctionCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParamMainFunctionCall(ANoParamMainFunctionCall node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParamMainFunctionCall(ANoParamMainFunctionCall node)
    {
        InANoParamMainFunctionCall(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutANoParamMainFunctionCall(node);
    }
    public virtual void InAWithPromiseFunctionDeclarationStatement(AWithPromiseFunctionDeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWithPromiseFunctionDeclarationStatement(AWithPromiseFunctionDeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWithPromiseFunctionDeclarationStatement(AWithPromiseFunctionDeclarationStatement node)
    {
        InAWithPromiseFunctionDeclarationStatement(node);
        if(node.GetFuncname() != null)
        {
            node.GetFuncname().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetPromise() != null)
        {
            node.GetPromise().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAWithPromiseFunctionDeclarationStatement(node);
    }
    public virtual void InAWithoutPromiseFunctionDeclarationStatement(AWithoutPromiseFunctionDeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWithoutPromiseFunctionDeclarationStatement(AWithoutPromiseFunctionDeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWithoutPromiseFunctionDeclarationStatement(AWithoutPromiseFunctionDeclarationStatement node)
    {
        InAWithoutPromiseFunctionDeclarationStatement(node);
        if(node.GetFuncname() != null)
        {
            node.GetFuncname().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAWithoutPromiseFunctionDeclarationStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetFuncname() != null)
        {
            node.GetFuncname().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InASingleParamFormalParameters(ASingleParamFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParamFormalParameters(ASingleParamFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParamFormalParameters(ASingleParamFormalParameters node)
    {
        InASingleParamFormalParameters(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        OutASingleParamFormalParameters(node);
    }
    public virtual void InAMultipleParamsFormalParameters(AMultipleParamsFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParamsFormalParameters(AMultipleParamsFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParamsFormalParameters(AMultipleParamsFormalParameters node)
    {
        InAMultipleParamsFormalParameters(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        OutAMultipleParamsFormalParameters(node);
    }
    public virtual void InASingleParamParameters(ASingleParamParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParamParameters(ASingleParamParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParamParameters(ASingleParamParameters node)
    {
        InASingleParamParameters(node);
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        OutASingleParamParameters(node);
    }
    public virtual void InAMultipleParamsParameters(AMultipleParamsParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParamsParameters(AMultipleParamsParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParamsParameters(AMultipleParamsParameters node)
    {
        InAMultipleParamsParameters(node);
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutAMultipleParamsParameters(node);
    }
    public virtual void InAValueAssignStatement(AValueAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueAssignStatement(AValueAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueAssignStatement(AValueAssignStatement node)
    {
        InAValueAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAValueAssignStatement(node);
    }
    public virtual void InAFunctionAssignStatement(AFunctionAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionAssignStatement(AFunctionAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionAssignStatement(AFunctionAssignStatement node)
    {
        InAFunctionAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutAFunctionAssignStatement(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAElseStatement(AElseStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseStatement(AElseStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseStatement(AElseStatement node)
    {
        InAElseStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetTrue() != null)
        {
            node.GetTrue().Apply(this);
        }
        if(node.GetOnetwo() != null)
        {
            node.GetOnetwo().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetFalse() != null)
        {
            node.GetFalse().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAElseStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAOrOrExp(AOrOrExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrOrExp(AOrOrExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrOrExp(AOrOrExp node)
    {
        InAOrOrExp(node);
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetAndExp() != null)
        {
            node.GetAndExp().Apply(this);
        }
        OutAOrOrExp(node);
    }
    public virtual void InAPassOrExp(APassOrExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassOrExp(APassOrExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassOrExp(APassOrExp node)
    {
        InAPassOrExp(node);
        if(node.GetAndExp() != null)
        {
            node.GetAndExp().Apply(this);
        }
        OutAPassOrExp(node);
    }
    public virtual void InAAndAndExp(AAndAndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndAndExp(AAndAndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndAndExp(AAndAndExp node)
    {
        InAAndAndExp(node);
        if(node.GetAndExp() != null)
        {
            node.GetAndExp().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetNotExp() != null)
        {
            node.GetNotExp().Apply(this);
        }
        OutAAndAndExp(node);
    }
    public virtual void InAPassAndExp(APassAndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassAndExp(APassAndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassAndExp(APassAndExp node)
    {
        InAPassAndExp(node);
        if(node.GetNotExp() != null)
        {
            node.GetNotExp().Apply(this);
        }
        OutAPassAndExp(node);
    }
    public virtual void InANotNotExp(ANotNotExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotNotExp(ANotNotExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANotNotExp(ANotNotExp node)
    {
        InANotNotExp(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetCompExpEq() != null)
        {
            node.GetCompExpEq().Apply(this);
        }
        OutANotNotExp(node);
    }
    public virtual void InAPassNotExp(APassNotExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassNotExp(APassNotExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassNotExp(APassNotExp node)
    {
        InAPassNotExp(node);
        if(node.GetCompExpEq() != null)
        {
            node.GetCompExpEq().Apply(this);
        }
        OutAPassNotExp(node);
    }
    public virtual void InAEqCompExpEq(AEqCompExpEq node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqCompExpEq(AEqCompExpEq node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqCompExpEq(AEqCompExpEq node)
    {
        InAEqCompExpEq(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetEq() != null)
        {
            node.GetEq().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAEqCompExpEq(node);
    }
    public virtual void InANeqCompExpEq(ANeqCompExpEq node)
    {
        DefaultIn(node);
    }

    public virtual void OutANeqCompExpEq(ANeqCompExpEq node)
    {
        DefaultOut(node);
    }

    public override void CaseANeqCompExpEq(ANeqCompExpEq node)
    {
        InANeqCompExpEq(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetNeq() != null)
        {
            node.GetNeq().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutANeqCompExpEq(node);
    }
    public virtual void InAPassCompExpEq(APassCompExpEq node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassCompExpEq(APassCompExpEq node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassCompExpEq(APassCompExpEq node)
    {
        InAPassCompExpEq(node);
        if(node.GetCompExpLtgt() != null)
        {
            node.GetCompExpLtgt().Apply(this);
        }
        OutAPassCompExpEq(node);
    }
    public virtual void InALtCompExpLtgt(ALtCompExpLtgt node)
    {
        DefaultIn(node);
    }

    public virtual void OutALtCompExpLtgt(ALtCompExpLtgt node)
    {
        DefaultOut(node);
    }

    public override void CaseALtCompExpLtgt(ALtCompExpLtgt node)
    {
        InALtCompExpLtgt(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetLt() != null)
        {
            node.GetLt().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutALtCompExpLtgt(node);
    }
    public virtual void InALteCompExpLtgt(ALteCompExpLtgt node)
    {
        DefaultIn(node);
    }

    public virtual void OutALteCompExpLtgt(ALteCompExpLtgt node)
    {
        DefaultOut(node);
    }

    public override void CaseALteCompExpLtgt(ALteCompExpLtgt node)
    {
        InALteCompExpLtgt(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetLte() != null)
        {
            node.GetLte().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutALteCompExpLtgt(node);
    }
    public virtual void InAGtCompExpLtgt(AGtCompExpLtgt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGtCompExpLtgt(AGtCompExpLtgt node)
    {
        DefaultOut(node);
    }

    public override void CaseAGtCompExpLtgt(AGtCompExpLtgt node)
    {
        InAGtCompExpLtgt(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetGt() != null)
        {
            node.GetGt().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAGtCompExpLtgt(node);
    }
    public virtual void InAGteCompExpLtgt(AGteCompExpLtgt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGteCompExpLtgt(AGteCompExpLtgt node)
    {
        DefaultOut(node);
    }

    public override void CaseAGteCompExpLtgt(AGteCompExpLtgt node)
    {
        InAGteCompExpLtgt(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetGte() != null)
        {
            node.GetGte().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAGteCompExpLtgt(node);
    }
    public virtual void InAPassCompExpLtgt(APassCompExpLtgt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassCompExpLtgt(APassCompExpLtgt node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassCompExpLtgt(APassCompExpLtgt node)
    {
        InAPassCompExpLtgt(node);
        if(node.GetExp0() != null)
        {
            node.GetExp0().Apply(this);
        }
        OutAPassCompExpLtgt(node);
    }
    public virtual void InAAddExp0(AAddExp0 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExp0(AAddExp0 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExp0(AAddExp0 node)
    {
        InAAddExp0(node);
        if(node.GetExp0() != null)
        {
            node.GetExp0().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExp1() != null)
        {
            node.GetExp1().Apply(this);
        }
        OutAAddExp0(node);
    }
    public virtual void InASubExp0(ASubExp0 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubExp0(ASubExp0 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubExp0(ASubExp0 node)
    {
        InASubExp0(node);
        if(node.GetExp0() != null)
        {
            node.GetExp0().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExp1() != null)
        {
            node.GetExp1().Apply(this);
        }
        OutASubExp0(node);
    }
    public virtual void InAPassExp0(APassExp0 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExp0(APassExp0 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExp0(APassExp0 node)
    {
        InAPassExp0(node);
        if(node.GetExp1() != null)
        {
            node.GetExp1().Apply(this);
        }
        OutAPassExp0(node);
    }
    public virtual void InAMultiplyExp1(AMultiplyExp1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExp1(AMultiplyExp1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExp1(AMultiplyExp1 node)
    {
        InAMultiplyExp1(node);
        if(node.GetExp1() != null)
        {
            node.GetExp1().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExp2() != null)
        {
            node.GetExp2().Apply(this);
        }
        OutAMultiplyExp1(node);
    }
    public virtual void InADivideExp1(ADivideExp1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExp1(ADivideExp1 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExp1(ADivideExp1 node)
    {
        InADivideExp1(node);
        if(node.GetExp1() != null)
        {
            node.GetExp1().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExp2() != null)
        {
            node.GetExp2().Apply(this);
        }
        OutADivideExp1(node);
    }
    public virtual void InAPassExp1(APassExp1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExp1(APassExp1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExp1(APassExp1 node)
    {
        InAPassExp1(node);
        if(node.GetExp2() != null)
        {
            node.GetExp2().Apply(this);
        }
        OutAPassExp1(node);
    }
    public virtual void InANegativeExp2(ANegativeExp2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExp2(ANegativeExp2 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExp2(ANegativeExp2 node)
    {
        InANegativeExp2(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExp3() != null)
        {
            node.GetExp3().Apply(this);
        }
        OutANegativeExp2(node);
    }
    public virtual void InAPassExp2(APassExp2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExp2(APassExp2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExp2(APassExp2 node)
    {
        InAPassExp2(node);
        if(node.GetExp3() != null)
        {
            node.GetExp3().Apply(this);
        }
        OutAPassExp2(node);
    }
    public virtual void InAParenthesisExp3(AParenthesisExp3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExp3(AParenthesisExp3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExp3(AParenthesisExp3 node)
    {
        InAParenthesisExp3(node);
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        OutAParenthesisExp3(node);
    }
    public virtual void InAPassExp3(APassExp3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExp3(APassExp3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExp3(APassExp3 node)
    {
        InAPassExp3(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExp3(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InADoubleOperand(ADoubleOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutADoubleOperand(ADoubleOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseADoubleOperand(ADoubleOperand node)
    {
        InADoubleOperand(node);
        if(node.GetDouble() != null)
        {
            node.GetDouble().Apply(this);
        }
        OutADoubleOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainFunctionCall() != null)
        {
            node.GetMainFunctionCall().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFunctionDeclarationStatement().Count];
            node.GetFunctionDeclarationStatement().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PFunctionDeclarationStatement) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetConstantDeclareStatement().Count];
            node.GetConstantDeclareStatement().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PConstantDeclareStatement) temp[i]).Apply(this);
            }
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAMainStatement(AMainStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainStatement(AMainStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainStatement(AMainStatement node)
    {
        InAMainStatement(node);
        if(node.GetMainFunctionCall() != null)
        {
            node.GetMainFunctionCall().Apply(this);
        }
        OutAMainStatement(node);
    }
    public virtual void InAIfStmtStatement(AIfStmtStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStmtStatement(AIfStmtStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStmtStatement(AIfStmtStatement node)
    {
        InAIfStmtStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfStmtStatement(node);
    }
    public virtual void InAElseStmtStatement(AElseStmtStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseStmtStatement(AElseStmtStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseStmtStatement(AElseStmtStatement node)
    {
        InAElseStmtStatement(node);
        if(node.GetElseStatement() != null)
        {
            node.GetElseStatement().Apply(this);
        }
        OutAElseStmtStatement(node);
    }
    public virtual void InAWhileStmtStatement(AWhileStmtStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStmtStatement(AWhileStmtStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStmtStatement(AWhileStmtStatement node)
    {
        InAWhileStmtStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhileStmtStatement(node);
    }
    public virtual void InAFuncDeclarationStatement(AFuncDeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncDeclarationStatement(AFuncDeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncDeclarationStatement(AFuncDeclarationStatement node)
    {
        InAFuncDeclarationStatement(node);
        if(node.GetFunctionDeclarationStatement() != null)
        {
            node.GetFunctionDeclarationStatement().Apply(this);
        }
        OutAFuncDeclarationStatement(node);
    }
    public virtual void InANoAssignDeclareStatement(ANoAssignDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoAssignDeclareStatement(ANoAssignDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseANoAssignDeclareStatement(ANoAssignDeclareStatement node)
    {
        InANoAssignDeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutANoAssignDeclareStatement(node);
    }
    public virtual void InAAssignDeclareStatement(AAssignDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignDeclareStatement(AAssignDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignDeclareStatement(AAssignDeclareStatement node)
    {
        InAAssignDeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAAssignDeclareStatement(node);
    }
    public virtual void InAAssignFunctionDeclareStatement(AAssignFunctionDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignFunctionDeclareStatement(AAssignFunctionDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignFunctionDeclareStatement(AAssignFunctionDeclareStatement node)
    {
        InAAssignFunctionDeclareStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAAssignFunctionDeclareStatement(node);
    }
    public virtual void InAConstConstantDeclareStatement(AConstConstantDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstConstantDeclareStatement(AConstConstantDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstConstantDeclareStatement(AConstConstantDeclareStatement node)
    {
        InAConstConstantDeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        OutAConstConstantDeclareStatement(node);
    }
    public virtual void InAMainFunctionCall(AMainFunctionCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunctionCall(AMainFunctionCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunctionCall(AMainFunctionCall node)
    {
        InAMainFunctionCall(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainFunctionCall(node);
    }
    public virtual void InANoParamMainFunctionCall(ANoParamMainFunctionCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParamMainFunctionCall(ANoParamMainFunctionCall node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParamMainFunctionCall(ANoParamMainFunctionCall node)
    {
        InANoParamMainFunctionCall(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutANoParamMainFunctionCall(node);
    }
    public virtual void InAWithPromiseFunctionDeclarationStatement(AWithPromiseFunctionDeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWithPromiseFunctionDeclarationStatement(AWithPromiseFunctionDeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWithPromiseFunctionDeclarationStatement(AWithPromiseFunctionDeclarationStatement node)
    {
        InAWithPromiseFunctionDeclarationStatement(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetPromise() != null)
        {
            node.GetPromise().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetFuncname() != null)
        {
            node.GetFuncname().Apply(this);
        }
        OutAWithPromiseFunctionDeclarationStatement(node);
    }
    public virtual void InAWithoutPromiseFunctionDeclarationStatement(AWithoutPromiseFunctionDeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWithoutPromiseFunctionDeclarationStatement(AWithoutPromiseFunctionDeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWithoutPromiseFunctionDeclarationStatement(AWithoutPromiseFunctionDeclarationStatement node)
    {
        InAWithoutPromiseFunctionDeclarationStatement(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetFuncname() != null)
        {
            node.GetFuncname().Apply(this);
        }
        OutAWithoutPromiseFunctionDeclarationStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetFuncname() != null)
        {
            node.GetFuncname().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InASingleParamFormalParameters(ASingleParamFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParamFormalParameters(ASingleParamFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParamFormalParameters(ASingleParamFormalParameters node)
    {
        InASingleParamFormalParameters(node);
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutASingleParamFormalParameters(node);
    }
    public virtual void InAMultipleParamsFormalParameters(AMultipleParamsFormalParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParamsFormalParameters(AMultipleParamsFormalParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParamsFormalParameters(AMultipleParamsFormalParameters node)
    {
        InAMultipleParamsFormalParameters(node);
        if(node.GetFormalParameters() != null)
        {
            node.GetFormalParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAMultipleParamsFormalParameters(node);
    }
    public virtual void InASingleParamParameters(ASingleParamParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParamParameters(ASingleParamParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParamParameters(ASingleParamParameters node)
    {
        InASingleParamParameters(node);
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        OutASingleParamParameters(node);
    }
    public virtual void InAMultipleParamsParameters(AMultipleParamsParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParamsParameters(AMultipleParamsParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParamsParameters(AMultipleParamsParameters node)
    {
        InAMultipleParamsParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        OutAMultipleParamsParameters(node);
    }
    public virtual void InAValueAssignStatement(AValueAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAValueAssignStatement(AValueAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAValueAssignStatement(AValueAssignStatement node)
    {
        InAValueAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAValueAssignStatement(node);
    }
    public virtual void InAFunctionAssignStatement(AFunctionAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionAssignStatement(AFunctionAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionAssignStatement(AFunctionAssignStatement node)
    {
        InAFunctionAssignStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionAssignStatement(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAElseStatement(AElseStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElseStatement(AElseStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAElseStatement(AElseStatement node)
    {
        InAElseStatement(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetFalse() != null)
        {
            node.GetFalse().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetOnetwo() != null)
        {
            node.GetOnetwo().Apply(this);
        }
        if(node.GetTrue() != null)
        {
            node.GetTrue().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAElseStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetCloseBrace() != null)
        {
            node.GetCloseBrace().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetOpenBrace() != null)
        {
            node.GetOpenBrace().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAOrOrExp(AOrOrExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrOrExp(AOrOrExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrOrExp(AOrOrExp node)
    {
        InAOrOrExp(node);
        if(node.GetAndExp() != null)
        {
            node.GetAndExp().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        OutAOrOrExp(node);
    }
    public virtual void InAPassOrExp(APassOrExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassOrExp(APassOrExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassOrExp(APassOrExp node)
    {
        InAPassOrExp(node);
        if(node.GetAndExp() != null)
        {
            node.GetAndExp().Apply(this);
        }
        OutAPassOrExp(node);
    }
    public virtual void InAAndAndExp(AAndAndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndAndExp(AAndAndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndAndExp(AAndAndExp node)
    {
        InAAndAndExp(node);
        if(node.GetNotExp() != null)
        {
            node.GetNotExp().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetAndExp() != null)
        {
            node.GetAndExp().Apply(this);
        }
        OutAAndAndExp(node);
    }
    public virtual void InAPassAndExp(APassAndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassAndExp(APassAndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassAndExp(APassAndExp node)
    {
        InAPassAndExp(node);
        if(node.GetNotExp() != null)
        {
            node.GetNotExp().Apply(this);
        }
        OutAPassAndExp(node);
    }
    public virtual void InANotNotExp(ANotNotExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotNotExp(ANotNotExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANotNotExp(ANotNotExp node)
    {
        InANotNotExp(node);
        if(node.GetCompExpEq() != null)
        {
            node.GetCompExpEq().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotNotExp(node);
    }
    public virtual void InAPassNotExp(APassNotExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassNotExp(APassNotExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassNotExp(APassNotExp node)
    {
        InAPassNotExp(node);
        if(node.GetCompExpEq() != null)
        {
            node.GetCompExpEq().Apply(this);
        }
        OutAPassNotExp(node);
    }
    public virtual void InAEqCompExpEq(AEqCompExpEq node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqCompExpEq(AEqCompExpEq node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqCompExpEq(AEqCompExpEq node)
    {
        InAEqCompExpEq(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetEq() != null)
        {
            node.GetEq().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAEqCompExpEq(node);
    }
    public virtual void InANeqCompExpEq(ANeqCompExpEq node)
    {
        DefaultIn(node);
    }

    public virtual void OutANeqCompExpEq(ANeqCompExpEq node)
    {
        DefaultOut(node);
    }

    public override void CaseANeqCompExpEq(ANeqCompExpEq node)
    {
        InANeqCompExpEq(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetNeq() != null)
        {
            node.GetNeq().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutANeqCompExpEq(node);
    }
    public virtual void InAPassCompExpEq(APassCompExpEq node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassCompExpEq(APassCompExpEq node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassCompExpEq(APassCompExpEq node)
    {
        InAPassCompExpEq(node);
        if(node.GetCompExpLtgt() != null)
        {
            node.GetCompExpLtgt().Apply(this);
        }
        OutAPassCompExpEq(node);
    }
    public virtual void InALtCompExpLtgt(ALtCompExpLtgt node)
    {
        DefaultIn(node);
    }

    public virtual void OutALtCompExpLtgt(ALtCompExpLtgt node)
    {
        DefaultOut(node);
    }

    public override void CaseALtCompExpLtgt(ALtCompExpLtgt node)
    {
        InALtCompExpLtgt(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLt() != null)
        {
            node.GetLt().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutALtCompExpLtgt(node);
    }
    public virtual void InALteCompExpLtgt(ALteCompExpLtgt node)
    {
        DefaultIn(node);
    }

    public virtual void OutALteCompExpLtgt(ALteCompExpLtgt node)
    {
        DefaultOut(node);
    }

    public override void CaseALteCompExpLtgt(ALteCompExpLtgt node)
    {
        InALteCompExpLtgt(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLte() != null)
        {
            node.GetLte().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutALteCompExpLtgt(node);
    }
    public virtual void InAGtCompExpLtgt(AGtCompExpLtgt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGtCompExpLtgt(AGtCompExpLtgt node)
    {
        DefaultOut(node);
    }

    public override void CaseAGtCompExpLtgt(AGtCompExpLtgt node)
    {
        InAGtCompExpLtgt(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetGt() != null)
        {
            node.GetGt().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAGtCompExpLtgt(node);
    }
    public virtual void InAGteCompExpLtgt(AGteCompExpLtgt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGteCompExpLtgt(AGteCompExpLtgt node)
    {
        DefaultOut(node);
    }

    public override void CaseAGteCompExpLtgt(AGteCompExpLtgt node)
    {
        InAGteCompExpLtgt(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetGte() != null)
        {
            node.GetGte().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAGteCompExpLtgt(node);
    }
    public virtual void InAPassCompExpLtgt(APassCompExpLtgt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassCompExpLtgt(APassCompExpLtgt node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassCompExpLtgt(APassCompExpLtgt node)
    {
        InAPassCompExpLtgt(node);
        if(node.GetExp0() != null)
        {
            node.GetExp0().Apply(this);
        }
        OutAPassCompExpLtgt(node);
    }
    public virtual void InAAddExp0(AAddExp0 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExp0(AAddExp0 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExp0(AAddExp0 node)
    {
        InAAddExp0(node);
        if(node.GetExp1() != null)
        {
            node.GetExp1().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExp0() != null)
        {
            node.GetExp0().Apply(this);
        }
        OutAAddExp0(node);
    }
    public virtual void InASubExp0(ASubExp0 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubExp0(ASubExp0 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubExp0(ASubExp0 node)
    {
        InASubExp0(node);
        if(node.GetExp1() != null)
        {
            node.GetExp1().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExp0() != null)
        {
            node.GetExp0().Apply(this);
        }
        OutASubExp0(node);
    }
    public virtual void InAPassExp0(APassExp0 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExp0(APassExp0 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExp0(APassExp0 node)
    {
        InAPassExp0(node);
        if(node.GetExp1() != null)
        {
            node.GetExp1().Apply(this);
        }
        OutAPassExp0(node);
    }
    public virtual void InAMultiplyExp1(AMultiplyExp1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExp1(AMultiplyExp1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExp1(AMultiplyExp1 node)
    {
        InAMultiplyExp1(node);
        if(node.GetExp2() != null)
        {
            node.GetExp2().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExp1() != null)
        {
            node.GetExp1().Apply(this);
        }
        OutAMultiplyExp1(node);
    }
    public virtual void InADivideExp1(ADivideExp1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExp1(ADivideExp1 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExp1(ADivideExp1 node)
    {
        InADivideExp1(node);
        if(node.GetExp2() != null)
        {
            node.GetExp2().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExp1() != null)
        {
            node.GetExp1().Apply(this);
        }
        OutADivideExp1(node);
    }
    public virtual void InAPassExp1(APassExp1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExp1(APassExp1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExp1(APassExp1 node)
    {
        InAPassExp1(node);
        if(node.GetExp2() != null)
        {
            node.GetExp2().Apply(this);
        }
        OutAPassExp1(node);
    }
    public virtual void InANegativeExp2(ANegativeExp2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExp2(ANegativeExp2 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExp2(ANegativeExp2 node)
    {
        InANegativeExp2(node);
        if(node.GetExp3() != null)
        {
            node.GetExp3().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegativeExp2(node);
    }
    public virtual void InAPassExp2(APassExp2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExp2(APassExp2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExp2(APassExp2 node)
    {
        InAPassExp2(node);
        if(node.GetExp3() != null)
        {
            node.GetExp3().Apply(this);
        }
        OutAPassExp2(node);
    }
    public virtual void InAParenthesisExp3(AParenthesisExp3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExp3(AParenthesisExp3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExp3(AParenthesisExp3 node)
    {
        InAParenthesisExp3(node);
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetOrExp() != null)
        {
            node.GetOrExp().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        OutAParenthesisExp3(node);
    }
    public virtual void InAPassExp3(APassExp3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExp3(APassExp3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExp3(APassExp3 node)
    {
        InAPassExp3(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExp3(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InADoubleOperand(ADoubleOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutADoubleOperand(ADoubleOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseADoubleOperand(ADoubleOperand node)
    {
        InADoubleOperand(node);
        if(node.GetDouble() != null)
        {
            node.GetDouble().Apply(this);
        }
        OutADoubleOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
}
} // namespace CS426.analysis
